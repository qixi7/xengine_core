// Code generated by tools. DO NOT EDIT.
package timer

type smallObjCreatorType struct {
	creator_Item
	creatorSlice_Item
	creatorPtr_Item
}

var smallObjCreator smallObjCreatorType

type creator_Item struct {
	buf []Item
	idx int
}

func (cr *creator_Item) create(chunk int) *Item {
	if cr.idx >= len(cr.buf) {
		cr.buf = make([]Item, chunk)
		cr.idx = 0
	}
	current := &cr.buf[cr.idx]
	cr.idx++
	return current
}

type creatorSlice_Item struct {
	buf []Item
	idx int
}

func (cr *creatorSlice_Item) create(slen, scap, chunk int) []Item {
	if scap > chunk {
		return make([]Item, slen, scap)
	}
	if cr.idx+scap > len(cr.buf) {
		cr.buf = make([]Item, chunk, chunk)
		cr.idx = 0
	}
	current := cr.buf[cr.idx : cr.idx+slen : cr.idx+scap]
	cr.idx += scap
	return current
}

type creatorPtr_Item struct {
	buf []*Item
	idx int
}

func (cr *creatorPtr_Item) create(slen, scap, chunk int) []*Item {
	if scap > chunk {
		return make([]*Item, slen, scap)
	}
	if cr.idx+scap > len(cr.buf) {
		cr.buf = make([]*Item, chunk, chunk)
		cr.idx = 0
	}
	current := cr.buf[cr.idx : cr.idx+slen : cr.idx+scap]
	cr.idx += scap
	return current
}

func New_Item() *Item {
	return smallObjCreator.creator_Item.create(256)
}

func NewSlice_Item(slen, scap int) []Item {
	return smallObjCreator.creatorSlice_Item.create(slen, scap, 4096)
}

func NewPtrSlice_Item(slen, scap int) []*Item {
	return smallObjCreator.creatorPtr_Item.create(slen, scap, 4096)
}
