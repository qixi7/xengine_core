// Code generated by tools. DO NOT EDIT.
package baserpcpb

type smallObjCreatorType struct {
	creator_MsgSetUp
	creatorSlice_MsgSetUp
	creatorPtr_MsgSetUp
	creator_MsgCheck
	creatorSlice_MsgCheck
	creatorPtr_MsgCheck
}

var smallObjCreator smallObjCreatorType

type creator_MsgSetUp struct {
	buf []MsgSetUp
	idx int
}

func (cr *creator_MsgSetUp) create(chunk int) *MsgSetUp {
 	if cr.idx >= len(cr.buf) {
  		cr.buf = make([]MsgSetUp, chunk)
		cr.idx = 0
	}
 	current := &cr.buf[cr.idx]
 	cr.idx++
 	return current
}

type creatorSlice_MsgSetUp struct {
	buf []MsgSetUp
 	idx int
}

func (cr *creatorSlice_MsgSetUp) create(slen, scap, chunk int) []MsgSetUp {
	if scap > chunk {
  		return make([]MsgSetUp, slen, scap)
 	}
 	if cr.idx + scap > len(cr.buf) {
  		cr.buf = make([]MsgSetUp, chunk, chunk) 
  		cr.idx = 0
 	}
 	current := cr.buf[cr.idx:cr.idx+slen:cr.idx+scap]
 	cr.idx += scap
 	return current
}

type creatorPtr_MsgSetUp struct {
 	buf []*MsgSetUp
 	idx int
}

func (cr *creatorPtr_MsgSetUp) create(slen, scap, chunk int) []*MsgSetUp {
 	if scap > chunk {
  		return make([]*MsgSetUp, slen, scap)
 	}
 	if cr.idx + scap > len(cr.buf) {
  		cr.buf = make([]*MsgSetUp, chunk, chunk)
 	 	cr.idx = 0
 	}
 	current := cr.buf[cr.idx:cr.idx+slen:cr.idx+scap]
 	cr.idx += scap
 	return current
}

func New_MsgSetUp() *MsgSetUp {
	return smallObjCreator.creator_MsgSetUp.create(256)
}

func NewSlice_MsgSetUp(slen, scap int) []MsgSetUp {
	return smallObjCreator.creatorSlice_MsgSetUp.create(slen , scap, 4096)
}

func NewPtrSlice_MsgSetUp(slen, scap int) []*MsgSetUp {
	return smallObjCreator.creatorPtr_MsgSetUp.create(slen , scap, 4096)
}

type creator_MsgCheck struct {
	buf []MsgCheck
	idx int
}

func (cr *creator_MsgCheck) create(chunk int) *MsgCheck {
 	if cr.idx >= len(cr.buf) {
  		cr.buf = make([]MsgCheck, chunk)
		cr.idx = 0
	}
 	current := &cr.buf[cr.idx]
 	cr.idx++
 	return current
}

type creatorSlice_MsgCheck struct {
	buf []MsgCheck
 	idx int
}

func (cr *creatorSlice_MsgCheck) create(slen, scap, chunk int) []MsgCheck {
	if scap > chunk {
  		return make([]MsgCheck, slen, scap)
 	}
 	if cr.idx + scap > len(cr.buf) {
  		cr.buf = make([]MsgCheck, chunk, chunk) 
  		cr.idx = 0
 	}
 	current := cr.buf[cr.idx:cr.idx+slen:cr.idx+scap]
 	cr.idx += scap
 	return current
}

type creatorPtr_MsgCheck struct {
 	buf []*MsgCheck
 	idx int
}

func (cr *creatorPtr_MsgCheck) create(slen, scap, chunk int) []*MsgCheck {
 	if scap > chunk {
  		return make([]*MsgCheck, slen, scap)
 	}
 	if cr.idx + scap > len(cr.buf) {
  		cr.buf = make([]*MsgCheck, chunk, chunk)
 	 	cr.idx = 0
 	}
 	current := cr.buf[cr.idx:cr.idx+slen:cr.idx+scap]
 	cr.idx += scap
 	return current
}

func New_MsgCheck() *MsgCheck {
	return smallObjCreator.creator_MsgCheck.create(256)
}

func NewSlice_MsgCheck(slen, scap int) []MsgCheck {
	return smallObjCreator.creatorSlice_MsgCheck.create(slen , scap, 4096)
}

func NewPtrSlice_MsgCheck(slen, scap int) []*MsgCheck {
	return smallObjCreator.creatorPtr_MsgCheck.create(slen , scap, 4096)
}
